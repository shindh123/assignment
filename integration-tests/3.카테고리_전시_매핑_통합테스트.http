### 사전 준비: 필요한 데이터 생성

### 1. 메인 전시 생성
POST http://localhost:9090/admin/displays
Content-Type: application/json

{
  "name": "테스트용 전시",
  "description": "테스트용으로 노출되는 카테고리 전시입니다"
}

> {%
    client.global.set("displayId", response.body.id);
    client.test("테스트용 전시 생성 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### 2. 카테고리 생성 (신발)
POST http://localhost:9090/admin/categories
Content-Type: application/json

{
  "name": "신발"
}

> {%
    client.global.set("rootCategoryId", response.body.id);
    client.test("최상위 카테고리 생성 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### 3. 카테고리 생성 (스니커즈)
POST http://localhost:9090/admin/categories
Content-Type: application/json

{
  "name": "스니커즈"
}

> {%
    client.global.set("sneakersCategoryId", response.body.id);
    client.test("하위 카테고리 생성 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### 4. 카테고리 생성 (샌들)
POST http://localhost:9090/admin/categories
Content-Type: application/json

{
  "name": "샌들"
}

> {%
    client.global.set("sandalsCategoryId", response.body.id);
    client.test("하위 카테고리 생성 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### 4. 카테고리 생성 (캔버스)
POST http://localhost:9090/admin/categories
Content-Type: application/json

{
  "name": "캔버스"
}

> {%
    client.global.set("canvasCategoryId", response.body.id);
    client.test("하위 카테고리 생성 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### 카테고리-전시 매핑 시나리오 (카테고리 전시 할당은 멱등하지 않기 때문에 두번 할당되면 실패할 수 있음)

### 6. 최상위 카테고리를 전시에 할당 (신발)
POST http://localhost:9090/admin/mappings/displays/{{displayId}}/categories
Content-Type: application/json

{
  "categoryId": {{rootCategoryId}},
  "order": 1
}

> {%
    client.global.set("rootMappingId", response.body.id);
    client.test("최상위 카테고리 전시 할당 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.displayId === parseInt(client.global.get("displayId")), "Display ID does not match");
        client.assert(response.body.categoryId === parseInt(client.global.get("rootCategoryId")), "Category ID does not match");
        client.assert(response.body.parentId === null, "Parent ID should be null for root category");
    });
%}

### 7. 하위 카테고리를 전시에 할당 (신발 > 스니커즈)
POST http://localhost:9090/admin/mappings/displays/{{displayId}}/categories
Content-Type: application/json

{
  "categoryId": {{sneakersCategoryId}},
  "parentId": {{rootCategoryId}},
  "order": 1
}

> {%
    client.global.set("sneakersMappingId", response.body.id);
    client.test("하위 카테고리(스니커즈) 전시 할당 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.displayId === parseInt(client.global.get("displayId")), "Display ID does not match");
        client.assert(response.body.categoryId === parseInt(client.global.get("sneakersCategoryId")), "Category ID does not match");
        client.assert(response.body.parentId === parseInt(client.global.get("rootCategoryId")), "Parent ID does not match");
        client.assert(response.body.order === 1, "Order should be 1");
    });
%}

### 8. 하위 카테고리를 전시에 할당 (신발 > 샌들)
POST http://localhost:9090/admin/mappings/displays/{{displayId}}/categories
Content-Type: application/json

{
  "categoryId": {{sandalsCategoryId}},
  "parentId": {{rootCategoryId}},
  "order": 2
}

> {%
    client.global.set("sandalsMappingId", response.body.id);
    client.test("하위 카테고리(샌들) 전시 할당 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.displayId === parseInt(client.global.get("displayId")), "Display ID does not match");
        client.assert(response.body.categoryId === parseInt(client.global.get("sandalsCategoryId")), "Category ID does not match");
        client.assert(response.body.parentId === parseInt(client.global.get("rootCategoryId")), "Parent ID does not match");
        client.assert(response.body.order === 2, "Order should be 1");
    });
%}

### 9. 하위 카테고리를 전시에 할당 (신발 > 스니커즈 > 캔버스)
POST http://localhost:9090/admin/mappings/displays/{{displayId}}/categories
Content-Type: application/json

{
  "categoryId": {{canvasCategoryId}},
  "parentId": {{sneakersCategoryId}},
  "order": 1
}

> {%
    client.global.set("canvasMappingId", response.body.id);
    client.test("하위 카테고리(캔버스) 전시 할당 성공", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.displayId === parseInt(client.global.get("displayId")), "Display ID does not match");
        client.assert(response.body.categoryId === parseInt(client.global.get("canvasCategoryId")), "Category ID does not match");
        client.assert(response.body.parentId === parseInt(client.global.get("sneakersCategoryId")), "Parent ID does not match");
        client.assert(response.body.order === 1, "Order should be 1");
    });
%}

### 10. 특정 매핑 조회 (스니커즈)
GET http://localhost:9090/admin/mappings/displays/{{displayId}}/categories/{{sneakersCategoryId}}

> {%
    client.test("매핑 단건 조회 성공", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.displayId === parseInt(client.global.get("displayId")), "Display ID does not match");
        client.assert(response.body.categoryId === parseInt(client.global.get("sneakersCategoryId")), "Category ID does not match");
    });
%}

### 11. 전시에 할당된 모든 카테고리 목록 조회
GET http://localhost:9090/admin/mappings/displays/{{displayId}}/categories?page=0&size=10

> {%
    client.test("매핑 목록 조회 성공", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.content.length >= 4, "Should have at least 4 mappings");
    });
%}

### 12. 매핑 정보 수정 (스니커즈 > 캔버스 to 샌들 > 캔버스)
PUT http://localhost:9090/admin/mappings/{{canvasMappingId}}
Content-Type: application/json

{
    "categoryId": {{canvasCategoryId}},
    "displayId": {{displayId}},
    "parentId": {{sandalsCategoryId}},
    "order": 10
}

> {%
    client.test("매핑 정보 수정 성공", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.order === 10, "Order was not updated");
    });
%}

### 13. 전시에서 카테고리 제거 (캔버스)
DELETE http://localhost:9090/admin/mappings/displays/{{displayId}}/categories/{{canvasCategoryId}}

> {%
    client.test("매핑 삭제 성공", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### 14. 삭제 확인 (모든 매핑 조회 후 하의가 없는지 확인)
GET http://localhost:9090/admin/mappings/displays/{{displayId}}/categories

> {%
    client.test("매핑 삭제 확인", function() {
        client.assert(response.status === 200, "Response status is not 200");
        let mappingRemoved = true;
        for (let i = 0; i < response.body.content.length; i++) {
            if (response.body.content[i].categoryId === parseInt(client.global.get("canvasCategoryId"))) {
                mappingRemoved = false;
                break;
            }
        }
        client.assert(mappingRemoved, "Mapping should be removed");
    });
%}
